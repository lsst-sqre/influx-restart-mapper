#!/usr/bin/env python3
import asyncio
import logging
import os
from dataclasses import asdict, dataclass, field
from datetime import timedelta
from typing import Any, Dict, List, Union
from influxclient import InfluxClient

import aiohttp

TokenPost = Dict[str,Union[str,Dict[str,str]]]

class TokenMaker(InfluxClient):

    async def set_org_id(self) -> None:
        """Set the org id; requires org read permission in token"""
        url = f"{self.api_url}/orgs"
        resp = await self.session.get(url, params=self.params)
        obj = await resp.json()
        orgs = obj["orgs"]
        for o in orgs:
            if o["name"] == self.org:
                self.org_id = o["id"]
                self.log.debug(f"Found OrgID: {self.org_id}")
                return
        raise RuntimeError(f"Could not determine orgID for org {self.org}")

    
    def define_token(self) -> TokenPost:
        tok = {
            "description": "Token for task/alert creation",
            "orgID": self.org_id,
            "status": "active",
            "permissions": []
        }
        perms = []
        categories = ("buckets", "orgs", "tasks", "notificationRules",
                      "notificationEndpoints")
        for c in categories:
            for mode in ("read", "write"):
                perms.append({
                    "action": mode,
                    "resource": {
                        "orgID": self.org_id,
                        "type": c
                        }
                    })
        tok["permissions"] = perms
        self.log.debug(f"Token: {tok}")
        return tok

    async def create_token(self, tok):
        """Create an Authorization in InfluxDB."""
        url = f"{self.api_url}/authorizations"
        resp = await self.session.post(url, json=tok, params=self.params)

        obj = await resp.json()
        self.log.debug(f"obj = {obj}")
        self.log.debug(f"token = {obj['token']}")
        
        
async def main() -> None:
    async with TokenMaker() as tm:
        await tm.set_org_id()
        tok = tm.define_token()
        await tm.create_token(tok)

if __name__ == "__main__":
    asyncio.run(main())

